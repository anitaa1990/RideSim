[versions]
agp = "8.7.3"
kotlin = "2.1.10"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.1"
composeBom = "2025.03.00"
mockitoKotlin = "5.2.1"
coroutineTestVersion = "1.9.0"
lifecycleRuntimeComposeAndroid = "2.8.7"
googleMapsCompose = "6.5.2"
googlePlayServicesMaps = "19.1.0"
googlePlayServicesLocation = "21.3.0"
googlePlaces = "4.2.0"
googlePlacesCompose = "0.1.3"
googleMapsUtils = "3.5.3"
secretsGradlePlugin = "2.0.1"
hilt = "2.54"
hiltNavigationCompose = "1.2.0"
ksp = "2.1.10-1.0.30"
retrofit = "2.11.0"
okhttp = "4.12.0"
mockServer = "4.9.1"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }

## Coroutine unit test – to unit test coroutines
coroutine-test = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-test-jvm", version.ref = "coroutineTestVersion" }

## Mockito – to mock Dao/repository class in unit tests
mockito-kotlin = { group = "org.mockito.kotlin", name = "mockito-kotlin", version.ref = "mockitoKotlin" }

## Lifecycle Compose
androidx-lifecycle-runtime-compose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose-android", version.ref = "lifecycleRuntimeComposeAndroid" }

## Google Maps Compose: simplifies the integration of Google Maps into Jetpack Compose by providing
## composable functions that wrap the Maps SDK
google-maps-compose = { group = "com.google.maps.android", name = "maps-compose", version.ref = "googleMapsCompose" }

## Google play services - Maps & Location :
## Maps is required for integrating Google Maps into the app. It provides the core functionality of
## the Google Maps SDK for Android, such as displaying maps and interacting with map features.
google-play-services-maps = { group = "com.google.android.gms", name = "play-services-maps", version.ref = "googlePlayServicesMaps" }

## Location: This library is used for location-related functionalities, such as accessing the user's
## current location, geofencing, and activity recognition. It is essential if your app needs
##real-time location updates or geolocation services.
google-play-services-location = { group = "com.google.android.gms", name = "play-services-location", version.ref = "googlePlayServicesLocation" }

## Google Places API: provides a reusable Place Autocomplete composable based on the new Places API
google-places = { group = "com.google.android.libraries.places", name = "places", version.ref = "googlePlaces" }
google-places-compose = { group = "com.google.maps.android", name = "places-compose", version.ref = "googlePlacesCompose" }

## Google Maps Utils: includes utility functions like PolyUtil for decoding polylines
google-maps-utils = { group = "com.google.maps.android", name = "android-maps-utils", version.ref = "googleMapsUtils" }

## Hilt – dependency injection
hilt-android-compiler = { group = "com.google.dagger", name = "hilt-android-compiler", version.ref = "hilt" }
hilt-android = { group = "com.google.dagger", name = "hilt-android", version.ref = "hilt" }
hilt-android-testing = { group = "com.google.dagger", name = "hilt-android-testing", version.ref = "hilt" }
hilt-navigation-compose = { group = "androidx.hilt", name = "hilt-navigation-compose", version.ref = "hiltNavigationCompose" }

## Retrofit - API networking
retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
retrofit-gson-converter = { group = "com.squareup.retrofit2", name = "converter-gson", version.ref = "retrofit" }
retrofit-mock = { group = "com.squareup.okhttp3", name = "mockwebserver", version.ref = "mockServer" }

## okhttp - HTTP logging
okhttp = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okhttp" }
okhttp-logging-interceptor = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
secrets-gradle-plugin = { id = "com.google.android.libraries.mapsplatform.secrets-gradle-plugin", version.ref = "secretsGradlePlugin" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

